---
description: Project directory structure overview
alwaysApply: false
---

# LobeChat Project Structure

## Directory Structure

note: some files are not shown for simplicity.

```plaintext
lobe-chat/
├── apps/                           # Applications directory
│   └── desktop/                    # Electron desktop application
│       ├── src/                    # Desktop app source code
│       └── resources/              # Desktop app resources
├── docs/                           # Project documentation
│   ├── development/                # Development docs
│   ├── self-hosting/               # Self-hosting docs
│   └── usage/                      # Usage guides
├── locales/                        # Internationalization files
│   ├── en-US/                      # English
│   └── zh-CN/                      # Simplified Chinese
├── packages/                       # Monorepo packages directory
│   ├── const/                      # Constants definition package
│   ├── database/                   # Database related package
│   ├── model-runtime/              # AI model runtime package
│   ├── types/                      # TypeScript type definitions
│   ├── utils/                      # Utility functions package
│   ├── file-loaders/               # File processing packages
│   ├── prompts/                    # AI prompt management
│   └── web-crawler/                # Web crawling functionality
├── public/                         # Static assets
│   ├── icons/                      # Application icons
│   ├── images/                     # Image resources
│   └── screenshots/                # Application screenshots
├── scripts/                        # Build and tool scripts
├── src/                            # Main application source code (see below)
├── tests/                          # Test configuration
├── .cursor/                        # Cursor AI configuration
├── docker-compose/                 # Docker configuration
├── package.json                    # Project dependencies
├── pnpm-workspace.yaml            # pnpm monorepo configuration
├── next.config.ts                  # Next.js configuration
├── drizzle.config.ts              # Drizzle ORM configuration
└── tsconfig.json                   # TypeScript configuration
```

## Core Source Directory (`src/`)

```plaintext
src/
├── app/                            # Next.js App Router routes
│   ├── (backend)/                  # Backend API routes
│   │   ├── api/                    # REST API endpoints
│   │   │   ├── auth/               # Authentication endpoints
│   │   │   └── webhooks/           # Webhook handlers for various auth providers
│   │   ├── middleware/             # Request middleware
│   │   ├── oidc/                   # OpenID Connect endpoints
│   │   ├── trpc/                   # tRPC API routes
│   │   │   ├── async/              # Async tRPC endpoints
│   │   │   ├── edge/               # Edge runtime endpoints
│   │   │   ├── lambda/             # Lambda runtime endpoints
│   │   │   └── tools/              # Tools-specific endpoints
│   │   └── webapi/                 # Web API endpoints
│   │       ├── chat/               # Chat-related APIs for various providers
│   │       ├── models/             # Model management APIs
│   │       ├── plugin/             # Plugin system APIs
│   │       ├── stt/                # Speech-to-text APIs
│   │       ├── text-to-image/      # Image generation APIs
│   │       └── tts/                # Text-to-speech APIs
│   ├── [variants]/                 # Page route variants
│   │   ├── (main)/                 # Main application routes
│   │   │   ├── chat/               # Chat interface and workspace
│   │   │   ├── discover/           # Discover page (assistants, models, providers)
│   │   │   ├── files/              # File management interface
│   │   │   ├── image/              # Image generation interface
│   │   │   ├── profile/            # User profile and stats
│   │   │   ├── repos/              # Knowledge base repositories
│   │   │   └── settings/           # Application settings
│   │   └── @modal/                 # Modal routes
│   └── manifest.ts                 # PWA configuration
├── components/                     # Global shared components
│   ├── Analytics/                  # Analytics tracking components
│   ├── Error/                      # Error handling components
│   └── Loading/                    # Loading state components
├── config/                         # Application configuration
│   ├── aiModels/                   # AI model configurations
│   └── modelProviders/             # Model provider configurations
├── features/                       # Feature components (UI Layer)
│   ├── AgentSetting/               # Agent configuration and management
│   ├── ChatInput/                  # Chat input with file upload and tools
│   ├── Conversation/               # Message display and interaction
│   ├── FileManager/                # File upload and knowledge base
│   └── PluginStore/                # Plugin marketplace and management
├── hooks/                          # Custom React hooks
├── layout/                         # Global layout components
│   ├── AuthProvider/               # Authentication provider
│   └── GlobalProvider/             # Global state provider
├── libs/                           # External library integrations
│   ├── analytics/                  # Analytics services integration
│   ├── next-auth/                  # NextAuth.js configuration
│   └── oidc-provider/              # OIDC provider implementation
├── locales/                        # Internationalization resources
│   └── default/                    # Default language definitions
├── migrations/                     # Client-side data migrations
├── server/                         # Server-side code
│   ├── modules/                    # Server modules
│   ├── routers/                    # tRPC routers
│   └── services/                   # Server services
├── services/                       # Client service layer
│   ├── aiModel/                    # AI model services
│   ├── session/                    # Session services
│   └── message/                    # Message services
├── store/                          # Zustand state management
│   ├── agent/                      # Agent state
│   ├── chat/                       # Chat state
│   └── user/                       # User state
├── styles/                         # Global styles
├── tools/                          # Built-in tool system
│   ├── artifacts/                  # Code artifacts and preview
│   └── web-browsing/               # Web search and browsing
├── types/                          # TypeScript type definitions
└── utils/                          # Utility functions
    ├── client/                     # Client-side utilities
    └── server/                     # Server-side utilities
```

## Key Monorepo Packages

```plaintext
packages/
├── const/                          # Global constants and configurations
├── database/                       # Database schemas and models
│   ├── src/models/                 # Data models (CRUD operations)
│   ├── src/schemas/                # Drizzle database schemas
│   ├── src/repositories/           # Complex query layer
│   └── migrations/                 # Database migration files
├── model-runtime/                  # AI model runtime
│   └── src/
│       ├── openai/                 # OpenAI provider integration
│       ├── anthropic/              # Anthropic provider integration
│       ├── google/                 # Google AI provider integration
│       ├── ollama/                 # Ollama local model integration
│       ├── types/                  # Runtime type definitions
│       └── utils/                  # Runtime utilities
├── types/                          # Shared TypeScript type definitions
│   └── src/
│       ├── agent/                  # Agent-related types
│       ├── message/                # Message and chat types
│       ├── user/                   # User and session types
│       └── tool/                   # Tool and plugin types
├── utils/                          # Shared utility functions
│   └── src/
│       ├── client/                 # Client-side utilities
│       ├── server/                 # Server-side utilities
│       ├── fetch/                  # HTTP request utilities
│       └── tokenizer/              # Token counting utilities
├── file-loaders/                   # File loaders (PDF, DOCX, etc.)
├── prompts/                        # AI prompt management
└── web-crawler/                    # Web crawling functionality
```

## Architecture Layers

### 1. **Presentation Layer**

- Business-specific feature components and reusable UI components
- Global layout providers and responsive design wrappers

### 2. **State Management Layer**

- Zustand-based client state with domain-specific slices
- Actions and selectors for predictable state updates

### 3. **Client Service Layer**

- Environment-adaptive services (local Model vs remote tRPC)
- Dual implementation pattern for multi-runtime compatibility

### 4. **API Interface Layer**

- Type-safe tRPC routers organized by runtime environment
- Request routing and validation

### 5. **Server Service Layer**

- Platform-agnostic business logic with implementation abstractions
- Reusable, testable service composition

### 6. **Data Access Layer**

- **Repository**: Complex queries, joins, and transaction management
- **Model**: Basic CRUD operations and single-table queries
- **Schema**: Drizzle ORM definitions and migration management

### 7. **Integration & Extensions**

- **External**: Third-party service integrations and library wrappers
- **Built-in**: AI runtime, tool system, file processing, and web crawling

## Data Flow Architecture

### Unified Flow Pattern

```
UI Layer → State Management → Client Service → [Environment Branch] → Database
   ↓              ↓               ↓                    ↓                ↓
 React         Zustand     Environment         Local/Remote        PGLite/
Components      Store      Adaptation            Routing          PostgreSQL
```

### Environment-Specific Routing

| Mode            | UI       | Service Route          | Database            |
| --------------- | -------- | ---------------------- | ------------------- |
| **Browser/PWA** | React    | Direct Model Access    | PGLite (Local)      |
| **Server**      | React    | tRPC → Server Services | PostgreSQL (Remote) |
| **Desktop**     | Electron | tRPC → Local Node.js   | PGLite/PostgreSQL\* |

_\*Depends on cloud sync configuration_

### Key Characteristics

- **Type Safety**: End-to-end type safety via tRPC and Drizzle ORM
- **Local/Remote Dual Mode**: PGLite enables user data ownership and local control
